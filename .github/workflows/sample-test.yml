name: Build, Dockerize, and Deploy to ECS

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    name: Build Maven Project and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: us-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build Java Application
        run: mvn clean package -DskipTests

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=myweb
          REPO_URI=${{ secrets.ECR_REPO_URI }}
          docker build -t $IMAGE_NAME .
          docker tag $IMAGE_NAME:latest $REPO_URI:latest
          docker push $REPO_URI:latest
        env:
          REPO_URI: ${{ secrets.ECR_REPO_URI }}

  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Register New Task Definition
        run: |
          REGION=us-west-2
          CLUSTER_NAME=myweb-cluster
          SERVICE_NAME=tomcatservice
          IMAGE_URI=${{ secrets.ECR_REPO_URI }}:latest

          TASK_FAMILY=myweb-task
          CPU=2
          MEMORY=2048
          CONTAINER_NAME=myweb-container
          PORT=8080

          echo "Registering a new task definition..."
          aws ecs register-task-definition \
            --family $TASK_FAMILY \
            --network-mode awsvpc \
            --execution-role-arn ${{ secrets.EXECUTION_ROLE_ARN }} \
            --container-definitions "[{
              \"name\": \"$CONTAINER_NAME\",
              \"image\": \"$IMAGE_URI\",
              \"memory\": $MEMORY,
              \"cpu\": $CPU,
              \"essential\": true,
              \"portMappings\": [{
                \"containerPort\": $PORT,
                \"hostPort\": $PORT,
                \"protocol\": \"tcp\"
              }]
            }]" \
            --requires-compatibilities FARGATE \
            --cpu $CPU \
            --memory $MEMORY \
            --region $REGION
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-2

      - name: Create or Update ECS Service
        run: |
          REGION=us-west-2
          CLUSTER_NAME=myweb-cluster
          SERVICE_NAME=tomcatservice
          TASK_FAMILY=myweb-task

          SERVICE_EXISTS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --region $REGION --query 'services[0].serviceName' --output text 2>/dev/null || echo "NONE")

          if [ "$SERVICE_EXISTS" = "NONE" ]; then
            echo "Creating a new ECS service..."
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $TASK_FAMILY \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" \
              --deployment-configuration "{\"deploymentCircuitBreaker\": {\"enable\": false, \"rollback\": false}, \"maximumPercent\": 200, \"minimumHealthyPercent\": 100}" \
              --region $REGION
          else
            echo "Updating the existing ECS service..."
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --task-definition $TASK_FAMILY \
              --force-new-deployment \
              --deployment-configuration "{\"deploymentCircuitBreaker\": {\"enable\": false, \"rollback\": false}, \"maximumPercent\": 200, \"minimumHealthyPercent\": 100}" \
              --region $REGION
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-2
